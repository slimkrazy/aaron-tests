                                            TYPE INFERENCE AND RECURSION

  WHAT IS TYPE INFERENCE?

  - Type inference pertains to the ability of the compiler to infer the type of an expression without it being
  specified by the programmer. It does this by assessing the value of the expression. If a value is a number, the compiler will
  understand that the expression is an Int.

  - Type inference also applies to return types. The return type of an expression is inferred by the compiler by assessing
  the last expression in the code path.


  RECURSION: 

- Recursion in computer programming is a programming technique where a function calls itself in order to solve a problem. It's a powerful and elegant way to solve complex problems by breaking them down into smaller, more manageable subproblems. The key idea in recursion is to define a problem in terms of one or more simpler instances of the same problem.

Recursion typically involves two main components:

1. Base Case: A condition that defines the simplest or smallest possible instance of the problem. When the base case is met, the recursion stops, and a result is returned.

2. Recursive Case: This is where the function calls itself with a modified or reduced version of the original problem. Each recursive call should move closer to the base case.

- Hereâ€™s an example in Scala that calculates the factorial of a number using recursion:

def factorial(n: Int): Int = {
  if (n == 0) {
    1  // Base case: factorial of 0 is 1
  } else {
    n * factorial(n - 1)  // Recursive case
  }
}

// Example usage:
val result = factorial(5)
println(s"Factorial of 5 is $result")  // Output: Factorial of 5 is 120

In this Scala code, the factorial function calculates the factorial of a non-negative integer n. The base case is when n is 0, and the function returns 1. In the recursive case, it multiplies n by the result of the factorial function called with n - 1. This recursion continues until the base case is reached, and the final result is calculated.


TAIL RECURSION:

- Tail recursion is a specific form of recursion in computer programming where the    recursive call is the last operation in a function. In other words, in a tail-recursive function, the result of the recursive call is immediately returned, and there are no pending operations after the recursive call.

Key characteristics of tail recursion:

1. The recursive call is the last operation in the function.
2. There are no pending calculations or operations after the recursive call.
3. The result of the recursive call is typically passed directly as the return value of the function.

The main difference between tail recursion and other forms of recursion (non-tail recursion) is how they handle the call stack. In a tail-recursive function, because there are no pending operations after the recursive call, the compiler or interpreter can optimize the code to reuse the current function's stack frame for the next recursive call. This is known as "tail call optimization" or "tail call elimination." It helps prevent stack overflow errors in cases of deep recursion.

In contrast, non-tail recursive functions have pending operations after the recursive call, which means each recursive call adds a new stack frame to the call stack, potentially leading to a stack overflow for deep recursion.

Tail recursion is a more efficient form of recursion in languages or environments that support tail call optimization, as it avoids unnecessary stack space consumption. However, not all programming languages and environments automatically perform this optimization, so it's essential to be aware of the capabilities of your chosen language or platform.

EXAMPLE OF TAIL RECURSION IN SCALA:

def anotherFactorial(n: Int): Int = {
  @tailrec // used for when you want to check that your function is tail recursive. If it's not, the compiler will produce an error.
    def factHelper(x: Int, accumulator: BigInt): BigInt =
      if (x <= 1) accumulator
      else factHelper(x - 1, x * accumulator)

      factHelper(n, 1)
}                                                                               

- In Scala, when you need loops, use TAIL RECURSION to ensure that you can iterate the value as efficiently as possible.  

- Any function can be turned into a tail recursive function. Main difference is to use "accumulator: BigInt" accumulators to store intermediate results
rather than having the function keep calling itself.

- We need as many accumulators as we have recursive calls on our code path. So sometimes we need more than one accumulator.


                                         TAIL RECURSION EXERCISES
1. Concatenate a string n times.
2. isPrime function tail recursive.
3. Fibonacci function, tail recursive.

1. STRING CONCATENATION N TIMES

  def concatenateTailrec(aString: String, n: Int, accumulator: String): String =
    if (n <= 0) accumulator
    else concatenateTailrec(aString, n - 1, aString + accumulator)

  println(concatenateTailrec("hello", 3, ""))

  SYNTAX BREAKDOWN:

  1.   "def concatenateTailrec(aString: String, n: Int, accumulator: String): String ="
  
  Function defined as "concatenateTailrec" which takes "aString" as a parameter as well as "n"
  and an "accumulator" which is a string. The accumulator type is a string because accumulators 
  need to have the same return type as the return type of the function.

  2. IMPLEMENTATION -  "if (n <= 0) accumulator
    else concatenateTailrec(aString, n - 1, aString + accumulator)"

    If n is less than or equal to 0, rather than returning the base case which is an empty string,
    it will return accumulator. Otherwise we call the function concatenateTailrec with the same aString as
    the parameter, with n - 1 this time and the accumulator will store the concatenation between aString and the 
    old accumulator.






