                             SCALA OBJECT ORIENTED BASICS


WHAT IS A CLASS?

- A class is a blueprint/template for creating an objects. Similar to Plato's "forms" concept.

- Objects are INSTANCES of classes and they encapsulate data and behaviour.
- A class defines the properties(fields or attributes) and methods(functions) that its 
objects will have.
- Ultimately, a class is a blueprint that defines what an object will look like (data) and
 an objects functionality (behaviour)


CREATING CLASSES:

class MyClass {
  // class definition
}

val myObject = new MyClass()

- In this example, new MyClass() is the instantiation of the class MyClass, and the variable myObject 
holds the resulting object.

- So, in everyday usage, you can think of "instantiating a class" and "creating an object" 
as describing the same process of creating an instance of a class. 
THE OBJECT IS THE CONCRETE RELISATION OF THE CLASS BLUEPRINT, and you can interact with it, 
access its fields, and invoke its methods.


EXAMPLE:

{

 val person = new Person // "new Person" is the instantiation of the class Person and "val person" holds the object.
 println(person)

}

class Person
class Person(name: String, age: Int)   // This is how we pass parameters to a class. Known as a constructor.

- A constructor is a special type of function that is called automatically when an object is created.
- So in the above case "(name: String, age: Int)", the constructor dictates that every single instance of 
the class person must be constructed by passing the parameters "name and age".

- Once we specifiy the parameters of the class, the compiler will only allow instantiations of said class
that have those parameters:

val person: new Person("Joe", 30)

- If we try to println(person.age) it won't work because CLASS PARAMETERS ARE NOT FIELDS!


HOW DO WE CONVERT PARAMETERS TO FIELDS?

- To convert parameters to fields we use "var" or "val" when we're specifying the class parameters.
For example: class Person(name: String, "val" age: Int)


ADDING FUNCTIONALITY TO A CLASS:

- To add functionality to a class, we use curly braces after we've specified the parameters.
The parameters pertain to the attributes/characteristics of the object, the functionality 
pertains to the behaviour of the object.

- Similar to implementaion details of a function, the functionality aspect of a class is added
within a code block {} after the class is declared for example: 

class person(name: String, val age: Int) {
    // here like with functions we can declare other values, expressions, even classes (nested classes)
    // vals and vars declared here are fields, just like "age" specified prior.
    // This means that they can be called upon/interacted with.
}


FUNCTIONS/METHODS WITHIN CLASSES:

- Functions defined within classes are known as METHODS.
- String interpolation is used here so that arguments can be passed to the parameters once the methods
is called. EXAMPLE:

 def greet(name: String): Unit = 
  println(s"$name says: Hi, $name")

  val person = new Person("Aaron", 28)
  println(person.age) // we won't be able to access "age" using the "." operator because age is a class PARAMETER
  and not a class FIELD.

  WHAT IS A CLASS FIELD?

  Fields are variables declared in a class that represent the state or data of an object.
  Fields can be val (immutable) or var (mutable).
  They are accessed using dot notation on instances of the class.

  - We would need to add "var" in the preceding "age" in the constructor to create a class field allowing us to access
  age with the dot operator.

  class Person(name: String, age: Int)  // constructor


EXAMPLE:

val person = new Person("Joe", 30) {
 println(person.name)
 person.greet("Aaron")
}

class Person(val name: String, val age: Int)

 // body
 val x = 2

 println(1 + 3)

 def greet(name: String): Unit = {
  println(s"$this.name says: Hi, $name")
 }

// Prints Aaron says: Hi, Aaron
// Want it to print, Joe says: Hi Aaron 


OVERLOADING METHODS:

- Overloading is when you define multiple methods/functions in classes, 
with the same name but different signatures. A method signature is a combination of a
mehtods's name, parameter types, and return type. 

Syntax for method signature:

def methodName(parameter1: Type1, parameter2: Type2, ...): ReturnType = {
  // method body
}

- Overloading cont. Method overloading is allowed in Scala and it won't confuse the compiler
- Example of method overloading:

class Calculator {
  def add(x: Int, y: Int): Int = {
    x + y
  }

  def add(x: Double, y: Double): Double = {
    x + y
  }

  def add(x: String, y: String): String = {
    x + y
  }
}

val calculator = new Calculator()

println(calculator.add(1, 2))          // Calls the first add method with Int parameters
println(calculator.add(1.5, 2.5))      // Calls the second add method with Double parameters
println(calculator.add("Hello", " "))  // Calls the third add method with String parameters

- Here the "add" method has 3 different signatures (different parameter and return types)
- The appropriate add method is called depending upon the arguments provided when calling.


MULTIPLE CONSTRUCTORS/OVERLOADING CONSTRUCTORS:

- class Person(val name: String, val age: Int) Remember, this is a constructor because it allows the 
construction of different instances of the same name: val person = new Person("Joe", 30)
- In Scala we can have multiple constructors for the same class.
- We can do this by using the keyword combo "def this".

- Remember, constructors in Scala are a type of method specifically designed for initializing objects, 
but not all methods in a class are constructors.

- Multiple constructors example:

- Auxiliary constructor for class Person(val name: String, val age: Int) that initialises the age with 0:
  
  def this(name:) = this(name, 0) // calls primary constructor

- So the implementation of the auxiliary constructor with only the name parameter calls the primary
constructor.
- The implementation of the auxiliary/ secondary constructor has to be another constructor exclusively.



