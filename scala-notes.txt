SCALA FUNDAMENTALS

- Scala was based on the JVM (Java Virtual Machine) making it compatible with all the libraries written in the Java ecosystem. You can use any Java code in Scala.

- Scala is a compiled language like C not an interpretive language like Python. 

- An expressive and powerful language with a blend of functional and object orientated programming.

- Scala has dynamic features.

- Scala is less verbose than Java. You can write less and achieve more.

- Demand for Scala engineers has syrocketed in recent years.

- Scala engineers are some of the highest paid in the industry.

- Scala is statically typed language. This means that a variable has a type. You must specify a type for every variable. Type errors are caught by the compiler and not by run time (need further research)
Scala uses type interfacing meaning it figures out the type for the variable. Must be familiar with error messages.

- Scala is more flexible for example you can write multiple classes in one file (need further research)


WHY LEARN SCALA?

1. You can use Java libraries in Scala code.

2. You can use Java code in Scala programs and you can use Scala code in Java programs.

3. You can use existing Java tools in Scala like Ant, Maven and J-unit.

4. Simplicity of Ruby with static typing and compiled byte code.


WHAT IS SBT??

- SBT meaning Scala Build Tool is an open source build tool for Scala 
and Java projects, similar to Java's Maven and Ant.

- A build tool basically provides a facility for you to compile, run, test and package your projects.

- SBT is a modern build tool and you can use it to create Java and Scala projects. It's the de facto build tool for Scala.


WHAT IS THE SIGNIFICANCE OF SBT?

- SBT allows for native support for compiling Scala code.

- SBT uses Apache Ivy for dependecy manacgement and so supports maven repositories.

- SBT operates on the only-update-on-request model.

- SBT has full Scala language support for creating tasks.

- SBT supports mixed Java and Scala projects.

- SBT comes with REPL (READ-EVAL-PRINT LOOP) which is an interactive computer environment. REPL takes a single input from the user
evaluates it and returns the result. You test features made with Scala with REPL.

**JAVAC command is used to compile the java source files.


CREATING A SCALA PROJECT USING SBT:

1. mkdir scala-samples

2. cd scala-samples and make directory called sbt_proj within scala-samples 

3. cd sbt_proj, run "sbt" command

4. sbt server should be established, use "exit" command to get out of sbt command prompt


DATA TYPES AND VARIABLES IN SCALA (FIRST SCALA PROGRAM):

- Because Scala is a compiled language any code we use to decLare variables will be converted to class files
and then the output will be shown.

- DATA TYPES WE CAN USE IN SCALA:

- Boolean (true or false)
- Byte
- Short
- Char
- Int
- String
- Long
- Float
- Double
- String 
- Unit - Corresponds to no value
- Null - Corresponds to null or empty reference
- Nothing - The subtype of any type
- Any - The supertype of any type
- Anyref - The supertype of any reference type

1. A folder must be created in which we will be using the Scala REPL (READ-EVAL-PRINT LOOP).

2. mkdir variables within scala-samples directory. 

3. cd variables. To start the Scala REPL we use "sbt console" command.

HOW DO WE DECLARE VARIABLES IN SCALA?

Variables can be declared in 2 ways in Scala. The first way is by using "var"
By declaring the variable using var, the value of the variable is mutable and so it can be changed ;ater.
Example - var a : Int = 7 (1. var - mutable value variable 2. "a" the name of the variable
3. colon 4. Int - name of type of value 4. value of the data type).

- We have now declared the following: a: Int = 7 (a variable whose name is a with a data type of Int
that is equal to 7.) 

- "res2:" this is a temp variable that increases by one every time we use the scala REPL above
For example if we do a + 10, the value will increase by 1 to "res3:"




