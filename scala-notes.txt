SCALA FUNDAMENTALS

- Scala was based on the JVM (Java Virtual Machine) making it compatible with all the libraries written in the Java ecosystem. You can use any Java code in Scala.

- Scala is a compiled language like C not an interpretive language like Python. 

- An expressive and powerful language with a blend of functional and object orientated programming.

- Scala has dynamic features.

- Scala is less verbose than Java. You can write less and achieve more.

- Demand for Scala engineers has syrocketed in recent years.

- Scala engineers are some of the highest paid in the industry.

- Scala is statically typed language. This means that a variable has a type. You must specify a type for every variable. Type errors are caught by the compiler and not by run time (need further research)
Scala uses type interfacing meaning it figures out the type for the variable. Must be familiar with error messages.

- Scala is more flexible for example you can write multiple classes in one file (need further research)


WHY LEARN SCALA?

1. You can use Java libraries in Scala code.

2. You can use Java code in Scala programs and you can use Scala code in Java programs.

3. You can use existing Java tools in Scala like Ant, Maven and J-unit.

4. Simplicity of Ruby with static typing and compiled byte code.


WHAT IS SBT??

- SBT meaning Scala Build Tool is an open source build tool for Scala 
and Java projects, similar to Java's Maven and Ant.

- A build tool basically provides a facility for you to compile, run, test and package your projects.

- SBT is a modern build tool and you can use it to create Java and Scala projects. It's the de facto build tool for Scala.


WHAT IS THE SIGNIFICANCE OF SBT?

- SBT allows for native support for compiling Scala code.

- SBT uses Apache Ivy for dependecy manacgement and so supports maven repositories.

- SBT operates on the only-update-on-request model.

- SBT has full Scala language support for creating tasks.

- SBT supports mixed Java and Scala projects.

- SBT comes with REPL (READ-EVAL-PRINT LOOP) which is an interactive computer environment. REPL takes a single input from the user
evaluates it and returns the result. You test features made with Scala with REPL.

**JAVAC command is used to compile the java source files.


CREATING A SCALA PROJECT USING SBT:

1. mkdir scala-samples

2. cd scala-samples and make directory called sbt_proj within scala-samples 

3. cd sbt_proj, run "sbt" command

4. sbt server should be established, use "exit" command to get out of sbt command prompt


DATA TYPES AND VARIABLES IN SCALA (FIRST SCALA PROGRAM):

- Because Scala is a compiled language any code we use to decLare variables will be converted to class files
and then the output will be shown.

- DATA TYPES WE CAN USE IN SCALA:

- Boolean (true or false)
- Byte
- Short
- Char
- Int
- String
- Long
- Float
- Double
- String 
- Unit - Corresponds to no value
- Null - Corresponds to null or empty reference
- Nothing - The subtype of any type
- Any - The supertype of any type
- Anyref - The supertype of any reference type

1. A folder must be created in which we will be using the Scala REPL (READ-EVAL-PRINT LOOP).

2. mkdir variables within scala-samples directory. 

3. cd variables. To start the Scala REPL we use "sbt console" command.

HOW DO WE DECLARE VARIABLES IN SCALA?

Variables can be declared in 2 ways in Scala. The first way is by using "var"
By declaring the variable using var, the value of the variable is mutable and so it can be changed ;ater.
Example - var a : Int = 7 (1. var - mutable value variable 2. "a" the name of the variable
3. colon 4. Int - name of type of value 4. value of the data type).

- We have now declared the following: a: Int = 7 (a variable whose name is a with a data type of Int
that is equal to 7.) 

- "res2:" this is a temp variable that increases by one every time we use the scala REPL above
For example if we do a + 10, the value will increase by 1 to "res3:"

The second way in which we can declare a variable in scala is via "val". This is how you declare an
IMMUTABLE variable meaning the value of the variable cannot be changed unlike variable set by var.

** Scala has a feature that allows it to automatically recognise the data type of a program by the initialisation value
For example: val d = 5 will automatically understand it's referring to integers d: Int = 5

SCALA FEATURES:

- You can use multiple expressions using a curly bracket: 
- val y = {val e: Int = 500 ; val f: Int = 550; e + f} (remember to put the "=" sign after you state the variable)
- The expressions are separated using a ";".
- IMPORTANTLY, the last expression in the curly bracket is what will be returned as the value of the variable.
- You can also separate expressions by pressing enter:

val x = {
    val a: Int = 144
    val b: Int = 145
    val c: Int = 146
    a+b+c  
}
x: Int = 435

- You can assign "lazy" to initialise a variable. This means that the value of the variable will only be initilised
when it is used.
- We do this when we want to save memory. If we have a list of thousands of variables, rather than allocating that memory upfront
despite the risk of some variables never being used, we use "lazy" to initialise the variable causing the value of the variable to only
be initialised when it is used.:

lazy val x = 500 
x: Int = <lazy>

- Meaning that the value of 500 is not assigned right now but when x is used, it will be.

DOWNLOADING SCALA IDE INTELLIJ

- We need a Scala IDE to debug, compile and format scala code. 
- Eclipse is no longer available with a scala plugin so we use Intellij.
- VScode is also an IDE.


OBJECT ORIENTATED AND FUNCTIONAL PROGRAMMING 

- Whats the difference? (chat gpt answer)

- Functional programming and object oriented programming are two different paradigms/programming models in software engineering.

- The key differences are as follows:

1. PROGRAMMING STYLE:
-  With object orientated programming OOP the use of objects, which are instances of classes is used to structure the code and represent real world entities.
Objects are significant because they encapsulate data and behaviour on real life entities, like people.
- Functional programming on the other hand focuses on writing programs by composing pure functions, emphasising immutability and avoiding shared STATE.

2. DATA HANDLING:
- In functional programming data is immutable meaning that it can't change after it's created.
functions created in functional programming operate on immutable data and produce new data as output.
- In contrast when it comes to data handling in OOP, objects encapsulate both data (attributes or properties) and
behaviour (methods or functions). Crucially unlike functions, objets can modify their internal states allowing for mutable data.
- In summary as int pertains to data handling, functional programming works on immutable data meaning it cannot be changed once created.
The functions created operate on immutable data and produce new data as output. Whereas OOP works with mutable data as objects can change their data 
even after created (attributes properties)

3. CONTROL FLOW:
- Functional programming relies heavily on recursion and higher order functions.
Higher order functions allow functions to take other functions as parameters or return functions as results.
- OOP typically utilises an imperative style, where control flow is managed via loops, conditionals and method calls.

4. INHERITANCE AND POLYMORPHISM:
- OOP supports concepts of inheritance and polymorhism. What is inheritance?? Inheritance allows classes to inherit properties and methods from parent classes
while polymorphism allows objects to be treated as instances of DIFFERENT classes as long as they share a common interface.
- In contrast functional programming typically does not use inheritance or polymorphism as functional programming favours composition of functions and data immutability.

5. STATE MANAGEMENT:
- In funcitonal programming, state management is done through once again pure functions and immutable data which means it avoids a shared mutable state and the need for locks and sychronisation techniques.
- OOP allows for mutable state, as objects are made up of mutable data that can change after it's created. This means taht state management can be more complexed than with
functional programming. This means that techniques such as encapsulation and access control are used in OOP state management.


